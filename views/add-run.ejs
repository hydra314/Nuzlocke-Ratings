<div class="container mt-5">
  <% if (errors && errors.length > 0) { %>
  <ul>
    <% for (let error of errors) { %>
    <li><%= error %></li>
    <% } %>
  </ul>
  <% } %>
  <h3>Adding a run for <%= player.username %></h3>
  <h4>Please enter <b>completed runs only</b>.</h4>
  <form action="" method="post" enctype="multipart/form-data">
    <br />
    <div class="form-row">
      <div class="form-group col-md-6">
        <label for="run-name-input" class="control-label">Run name</label>
        <input
          type="text"
          class="form-control"
          id="run-name-input"
          placeholder="Run name"
          required
          name="name"
        />
      </div>

      <div class="form-group col-md-6">
        <label for="run-link-input" class="control-label">Link to run</label>
        <input
          type="text"
          class="form-control"
          id="run-link-input"
          placeholder="Use full URL (include http://)"
          required
          name="link"
        />
      </div>
    </div>

    <div class="form-row">
      <div class="form-group col-md-4">
        <label for="basegame-input" class="control-label">Game played</label>
        <select
          id="basegame-input"
          name="basegame"
          class="form-control"
          onchange="changedBasegame();calculateRating()"
          required
        >
          <option selected disabled>Choose game</option>
          <% for(var i = 0; i < basegames.length; i++) { %>
          <option data-difficulty="<%= basegames[i].difficulty %>"
            >Pokemon <%= basegames[i].basegame_name %></option
          >
          <% } %>
        </select>
      </div>

      <div class="form-group col-md-4">
        <label for="death-count-input" class="control-label"
          >Number of deaths</label
        >
        <input
          type="number"
          class="form-control"
          id="death-count-input"
          name="deaths"
          required
          placeholder="Number of deaths"
          onchange="calculateRating()"
        />
      </div>

      <div class="form-group col-md-4">
        <label for="game-rating" class="control-label">Game rating</label>
        <input
          type="text"
          class="form-control"
          id="game-rating"
          name="rating"
          readonly
          value="0"
          style="background-color:black;color:white"
        />
      </div>
    </div>

    <div class="form-row">
      <div class="form-group col-md-4" id="team-selector"></div>

      <div class="form-group col-md-4"></div>

      <div class="col-md-4" id="rule-checkboxes">
        <label for="rule-checkboxes" class="control-label">Ruleset</label> <%
        for(var i = 0; i < rules.length; i++){ %>
        <div class="form-check">
          <input
            class="form-check-input"
            type="checkbox"
            value="<%= rules[i].name %>"
            name="ruleset"
            onchange="calculateRating()"
            data-difficulty="<%= rules[i].difficulty %>"
          />
          <label class="form-check-label" for="defaultCheck"
            ><%= rules[i].name %></label
          >
        </div>
        <% } %>
      </div>
    </div>
    <button type="submit" class="btn btn-primary float-right">Add Run</button>
  </form>
</div>

<script>
  var pokemon = <%-JSON.stringify(pokemon)%>;

  function changedBasegame(){
      gameInput = document.getElementById('basegame-input');
      teamSelector = document.getElementById('team-selector');
      basegameName = gameInput.value.replace('Pokemon ', '');
      createLabel(teamSelector);
      validPokemon = getValidPokemon(pokemon, basegameName);
      deleteTeamSlots();

      for(var j = 1; j <= 6; j++){
          var template = document.createElement('select');
          template.setAttribute('class', 'pokemon-input form-control');
          template.setAttribute('required', '');
          template.setAttribute('onchange', 'calculateRating()')

          var optionTemplate = document.createElement('option');
          optionTemplate.setAttribute('selected', '')
          optionTemplate.innerHTML = 'Empty team slot';

          template.setAttribute('name', 'party');
          template.appendChild(optionTemplate);
          for(var i = 0; i < validPokemon.length; i++){
              var pokemonOption = document.createElement('option');
              pokemonOption.setAttribute('data-rank', validPokemon[i].rank);
              pokemonOption.innerHTML = validPokemon[i].pokemon_name;
              template.appendChild(pokemonOption);
          }
          teamSelector.appendChild(template);
      }
  }

  function getValidPokemon(pokemon, basegameName){
      validPokemon = [];
      for(var i = 0; i < pokemon.length; i++){
          if(pokemon[i].basegame_name == basegameName){
              validPokemon.push(pokemon[i]);
          }
      }
      return validPokemon;
  }

  function createLabel(teamSelector){
      if(document.getElementById('final-team-label') == null){
          var label = document.createElement('label');
          label.setAttribute('class', 'control-label');
          label.setAttribute('id', 'final-team-label')
          label.innerHTML = 'Final team';
          teamSelector.appendChild(label);
      }
  }

  function deleteTeamSlots(){
      var teamSlots = document.querySelectorAll('.pokemon-input');
      for(var i = 0; i < teamSlots.length; i++){
          teamSlots[i].remove();
      }
  }

  function calculateRating(){
      var party = [];
      var ruleset = [];
      var gameRating = document.getElementById('game-rating');
      var basegame = document.getElementById('basegame-input');
      var deaths = parseInt(document.getElementById('death-count-input').value);
      var rules = document.getElementsByClassName('form-check-input');
      var team = document.getElementsByClassName('pokemon-input');

      var basegameDifficulty = basegame.options[basegame.options.selectedIndex].getAttribute('data-difficulty');
      for(var i = 0; i < team.length; i++){
          party.push(team[i].options[team[i].options.selectedIndex].getAttribute('data-rank'));
      }
      for(i = 0; i < rules.length; i++){
          if(rules[i].checked){
              ruleset.push(parseInt(rules[i].getAttribute('data-difficulty')));
          }
      }
      translatedRanks = translateRanks(party);

      if(basegameDifficulty){
          var rating = 1000 + 200 * basegameDifficulty;
          if(deaths || deaths == 0){
              rating += translateDeathCount(deaths);
          }
          for(i = 0; i < ruleset.length; i++){
              rating += ruleset[i] * 50;
          }
          for(i = 0; i < translatedRanks.length; i++){
              rating += translatedRanks[i];
          }
          if(rating < 100) rating = 100;
          gameRating.value = rating;
      }
  }

  function translateDeathCount(deaths){
      if(deaths == 5) return(0);
      else if(deaths == 4) return(25);
      else if(deaths == 6) return(-25);
      else if(deaths < 4) return(2 * translateDeathCount(deaths + 1));
      else if(deaths > 6) return(2 * translateDeathCount(deaths - 1));
  }

  function translateRanks(ranks){
      translated = [];
      for(var i = 0; i < ranks.length; i++){
          switch(ranks[i]){
              case 'S' : translated.push(0); break;
              case 'A+': translated.push(1); break;
              case 'A' : translated.push(2); break;
              case 'A-': translated.push(3); break;
              case 'B+': translated.push(5); break;
              case 'B' : translated.push(7); break;
              case 'B-': translated.push(9); break;
              case 'C+': translated.push(12); break;
              case 'C' : translated.push(15); break;
              case 'C-': translated.push(18); break;
              case 'D' : translated.push(22); break;
              case 'E' : translated.push(27); break;
          }
      }
      return translated;
  }
</script>
